generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id          Int       @id @default(autoincrement())
  user_name   String    @unique @db.VarChar(255)
  first_name  String?   @db.VarChar(55)
  last_name   String?   @db.VarChar(55)
  email       String?   @db.VarChar(100)
  phone       String?   @db.VarChar(55)
  password    String    @db.VarChar(100)
  reset_token String?   @db.VarChar(255)
  user_type   EUserType @default(MANAGER)
  last_login  DateTime? @db.DateTime(0)
  picture     String?   @db.Text
  is_deleted  Boolean   @default(false)
  is_active   Boolean   @default(true)
  created_by  Int?      @db.Int
}

model companies {
  id              Int      @id @default(autoincrement())
  company_name    String   @unique @db.VarChar(255) // Only unique for the task purpose
  company_manager Int      @db.Int
  lat             Float    @db.Float
  lng             Float    @db.Float
  is_deleted      Boolean  @default(false)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now()) @db.DateTime(0)
  created_by      Int      @db.Int

  // Relations
  services       services[] // One-to-many relation with the services model
  operating_days company_operating_days[] // One-to-many relation to company_operating_days
}

model weekdays {
  id         Int      @id @default(autoincrement())
  day_number Int      @unique @db.Int
  day_name   String   @unique @db.VarChar(10)
  is_deleted Boolean  @default(false)
  is_active  Boolean  @default(true)
  created_by Int      @db.Int
  created_at DateTime @default(now()) @db.DateTime(0)

  // Relations
  operating_days company_operating_days[] // One-to-many relation to company_operating_days
}

model company_operating_days {
  id         Int      @id @default(autoincrement())
  company_id Int      @db.Int
  weekday_id Int      @db.Int
  is_deleted Boolean  @default(false)
  is_active  Boolean  @default(true)
  created_by Int      @db.Int
  created_at DateTime @default(now()) @db.DateTime(0)

  // Relations
  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  weekday weekdays  @relation(fields: [weekday_id], references: [id], onDelete: Cascade)

  @@unique([company_id, weekday_id]) // Unique constraint to avoid duplicate entries for the same company and weekday
}

model services {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.VarChar(1000)
  company_id  Int      @db.Int
  is_deleted  Boolean  @default(false)
  is_active   Boolean  @default(true)
  created_by  Int      @db.Int
  created_at  DateTime @default(now()) @db.DateTime(0)

  // Relations
  company companies @relation(fields: [company_id], references: [id], onDelete: Cascade)
  tickets tickets[] // One-to-many relation with tickets

  @@unique([name, company_id]) // Composite unique constraint
}

model collectors {
  id         Int      @id @default(autoincrement())
  cnic       String   @db.VarChar(13)
  created_at DateTime @default(now()) @db.DateTime(0)
  is_deleted Boolean  @default(false)
  is_active  Boolean  @default(true)

  // Relations
  tickets tickets[] // One-to-many relation with tickets
}

model tickets {
  id            Int           @id @default(autoincrement())
  ticket_number Int
  service_id    Int           @db.Int
  collector_id  Int           @db.Int
  status        ETicketStatus @default(PENDING)
  created_by    Int           @db.Int
  created_at    DateTime      @default(now()) @db.DateTime(0)

  // Relations
  service   services   @relation(fields: [service_id], references: [id], onDelete: Cascade)
  collector collectors @relation(fields: [collector_id], references: [id], onDelete: Cascade)
}

// --- VIEWS

model vw_get_user_company {
  user_id            Int       @unique
  company_id         Int       @unique
  user_type          EUserType
  user_is_deleted    Boolean
  user_is_active     Boolean
  company_name       String
  first_name         String
  last_name          String
  company_is_deleted Boolean
  company_is_active  Boolean
}

// Enum for ticket status
enum ETicketStatus {
  PROCESS
  PENDING
  COMPLETED
}

enum EUserType {
  ADMIN
  MANAGER
  CUSTOMER
}
